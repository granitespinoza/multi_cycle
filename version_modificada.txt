// Code your design here
`timescale 1ns/1ps
 
// Aarm_multi.v
// David_Harris@hmc.edu, Sarah_Harris@hmc.edu 25 December 2013
// Multi-cycle implementation of a subset of ARMv4

// 16 32-bit registers
// Data-processing instructions
//   ADD, SUB, AND, ORR
//   INSTR <cond> <S> <Rd>, <Rn>, #immediate
//   INSTR <cond> <S> <Rd>, <Rn>, <Rm>
//    Rd <- <Rn> INSTR <Rm>	    	if (S) Update Status Flags
//    Rd <- <Rn> INSTR immediate	if (S) Update Status Flags
//   Instr[31:28] = cond
//   Instr[27:26] = Op = 00
//   Instr[25:20] = Funct
//                  [25]:    1 for immediate, 0 for register
//                  [24:21]: 0100 (ADD) / 0010 (SUB) /
//                           0000 (AND) / 1100 (ORR)
//                  [20]:    S (1 = update CPSR status Flags)
//   Instr[19:16] = Rn
//   Instr[15:12] = Rd
//   Instr[11:8]  = 0000
//   Instr[7:0]   = immed_8  (for #immediate type) / 
//                  0000<Rm> (for register type)
//   
// Load/Store instructions
//   LDR, STR
//   INSTR <Rd>, [<Rn>, #offset]
//    LDR: Rd <- Mem[<Rn>+offset]
//    STR: Mem[<Rn>+offset] <- Rd
//   Instr[31:28] = cond
//   Instr[27:26] = Op = 01 
//   Instr[25:20] = Funct
//                  [25]:    0 (A)
//                  [24:21]: 1100 (P/U/B/W)
//                  [20]:    L (1 for LDR, 0 for STR)
//   Instr[19:16] = Rn
//   Instr[15:12] = Rd
//   Instr[11:0]  = imm (zero extended)
//
// Branch instruction (PC <= PC + offset, PC holds 8 bytes past Branch
//   B
//   INSTR <target>
//    PC <- PC + 8 + imm << 2
//   Instr[31:28] = cond
//   Instr[27:25] = Op = 10
//   Instr[25:24] = Funct
//                  [25]: 1 (Branch)
//                  [24]: 0 (link)
//   Instr[23:0]  = offset (sign extend, shift left 2)
//   Note: no Branch delay slot on ARM
//
// Other:
//   R15 reads as PC+8
//   Conditional Encoding
//    cond  Meaning                       Flag
//    0000  Equal                         Z = 1
//    0001  Not Equal                     Z = 0
//    0010  Carry Set                     C = 1
//    0011  Carry Clear                   C = 0
//    0100  Minus                         N = 1
//    0101  Plus                          N = 0
//    0110  Overflow                      V = 1
//    0111  No Overflow                   V = 0
//    1000  Unsigned Higher               C = 1 & Z = 0
//    1001  Unsigned Lower/Same           C = 0 | Z = 1
//    1010  Signed greater/equal          N = V
//    1011  Signed less                   N != V
//    1100  Signed greater                N = V & Z = 0
//    1101  Signed less/equal             N != V | Z = 1
//    1110  Always                        any
//   Writes to register 15 (PC) are ignored 
module top (
	clk,
	reset,
	WriteData,
	Adr,
	MemWrite
);
	input wire clk;
	input wire reset;
	output wire [31:0] WriteData;
	output wire [31:0] Adr;
	output wire MemWrite;
	wire [31:0] PC;
	wire [31:0] Instr;
	wire [31:0] ReadData;
	// instantiate processor and shared memory
	arm arm(
		.clk(clk),
		.reset(reset),
		.MemWrite(MemWrite),
		.Adr(Adr),
		.WriteData(WriteData),
		.ReadData(ReadData)
	);
	mem mem(
		.clk(clk),
		.we(MemWrite),
		.a(Adr),
		.wd(WriteData),
		.rd(ReadData)
	);
endmodule

//-------------------------------------
module mem (
	clk,
	we,
	a,
	wd,
	rd
);
	input wire clk;
	input wire we;
	input wire [31:0] a;
	input wire [31:0] wd;
	output wire [31:0] rd;
  reg [31:0] RAM [0:63];
	initial $readmemh("memfile.dat", RAM);
	assign rd = RAM[a[31:2]]; // word aligned
	always @(posedge clk)
		if (we)
			RAM[a[31:2]] <= wd;
endmodule
//-------------------------------------
module arm (
	clk,
	reset,
	MemWrite,
	Adr,
	WriteData,
	ReadData
);
	input wire clk;
	input wire reset;
	output wire MemWrite;
	output wire [31:0] Adr;
	output wire [31:0] WriteData;
	input wire [31:0] ReadData;
	
	// Wires internos
	wire [31:0] Instr;
	wire [3:0] ALUFlags;
	wire PCWrite;
	wire RegWrite;
	wire IRWrite;
	wire AdrSrc;
	wire [1:0] RegSrc;
	wire [1:0] ALUSrcA;
	wire [1:0] ALUSrcB;
	wire [1:0] ImmSrc;
    wire [2:0] ALUControl;// CAMBIO: Ampliado a 3 bits
	wire [1:0] ResultSrc;
	wire PCS; // <-- SE DECLARA EL CABLE

	controller c(
		.clk(clk),
		.reset(reset),
		.Instr(Instr[31:12]),
		.ALUFlags(ALUFlags),
		.PCWrite(PCWrite),
		.MemWrite(MemWrite),
		.RegWrite(RegWrite),
		.IRWrite(IRWrite),
		.AdrSrc(AdrSrc),
		.RegSrc(RegSrc),
		.ALUSrcA(ALUSrcA),
		.ALUSrcB(ALUSrcB),
		.ResultSrc(ResultSrc),
		.ImmSrc(ImmSrc),
		.ALUControl(ALUControl),
		.PCS(PCS) // <-- SE CONECTA LA SALIDA
	);
	datapath dp(
		.clk(clk),
		.reset(reset),
		.Adr(Adr),
		.WriteData(WriteData),
		.ReadData(ReadData),
		.Instr(Instr),
		.ALUFlags(ALUFlags),
		.PCWrite(PCWrite),
		.RegWrite(RegWrite),
		.IRWrite(IRWrite),
		.AdrSrc(AdrSrc),
		.RegSrc(RegSrc),
		.ALUSrcA(ALUSrcA),
		.ALUSrcB(ALUSrcB),
		.ResultSrc(ResultSrc),
		.ImmSrc(ImmSrc),
		.ALUControl(ALUControl),
		.PCS(PCS) // <-- SE CONECTA LA ENTRADA
	);
endmodule

module controller (
	clk,
	reset,
	Instr,
	ALUFlags,
	PCWrite,
	MemWrite,
	RegWrite,
	IRWrite,
	AdrSrc,
	RegSrc,
	ALUSrcA,
	ALUSrcB,
	ResultSrc,
	ImmSrc,
	ALUControl,
	PCS // <-- AÑADIDO A LA LISTA DE PUERTOS
);
	input wire clk;
	input wire reset;
	input wire [31:12] Instr;
	input wire [3:0] ALUFlags;
	output wire PCWrite;
	output wire MemWrite;
	output wire RegWrite;
	output wire IRWrite;
	output wire AdrSrc;
	output wire [1:0] RegSrc;
	output wire [1:0] ALUSrcA;
	output wire [1:0] ALUSrcB;
	output wire [1:0] ResultSrc;
	output wire [1:0] ImmSrc;
    output wire [2:0] ALUControl; // CAMBIO: Ampliado a 3 bits
	output wire PCS; // <-- DECLARADO COMO SALIDA
	
	// Wires internos que conectan los sub-módulos
	wire [1:0] FlagW;
	wire NextPC;
	wire RegW;
	wire MemW;

	decode dec(
		.clk(clk),
		.reset(reset),
		.Op(Instr[27:26]),
		.Funct(Instr[25:20]),
		.Rd(Instr[15:12]),
		.FlagW(FlagW),
		.PCS(PCS),
		.NextPC(NextPC),
		.RegW(RegW),
		.MemW(MemW),
		.IRWrite(IRWrite),
		.AdrSrc(AdrSrc),
		.ResultSrc(ResultSrc),
		.ALUSrcA(ALUSrcA),
		.ALUSrcB(ALUSrcB),
		.ImmSrc(ImmSrc),
		.RegSrc(RegSrc),
		.ALUControl(ALUControl)
	);
	condlogic cl(
		.clk(clk),
		.reset(reset),
		.Cond(Instr[31:28]),
		.ALUFlags(ALUFlags),
		.FlagW(FlagW),
		.PCS(PCS),
		.NextPC(NextPC),
		.RegW(RegW),
		.MemW(MemW),
		.PCWrite(PCWrite),
		.RegWrite(RegWrite),
		.MemWrite(MemWrite)
	);
endmodule

// decode: Se actualiza la lógica para reconocer MUL y manejar 3 bits de control
module decode (
	clk,
	reset,
	Op,
	Funct,
	Rd,
	FlagW,
	PCS,
	NextPC,
	RegW,
	MemW,
	IRWrite,
	AdrSrc,
	ResultSrc,
	ALUSrcA,
	ALUSrcB,
	ImmSrc,
	RegSrc,
	ALUControl
);
	input wire clk;
	input wire reset;
	input wire [1:0] Op;
	input wire [5:0] Funct;
	input wire [3:0] Rd;
	output wire [1:0] FlagW;
	output wire PCS;
	output wire NextPC;
	output wire RegW;
	output wire MemW;
	output wire IRWrite;
	output wire AdrSrc;
	output wire [1:0] ResultSrc;
	output wire [1:0] ALUSrcA;
	output wire [1:0] ALUSrcB;
	output wire [1:0] ImmSrc;
	output wire [1:0] RegSrc;
	// CAMBIO: Ampliado a 3 bits
	output wire [2:0] ALUControl;

	wire Branch;
	wire ALUOp;

	mainfsm fsm(
		.clk(clk),
		.reset(reset),
		.Op(Op),
		.Funct(Funct),
		.IRWrite(IRWrite),
		.AdrSrc(AdrSrc),
		.ALUSrcA(ALUSrcA),
		.ALUSrcB(ALUSrcB),
		.ResultSrc(ResultSrc),
		.NextPC(NextPC),
		.RegW(RegW),
		.MemW(MemW),
		.Branch(Branch),
		.ALUOp(ALUOp)
	);

	// --- LÓGICA MODIFICADA ---
	// Se actualizan los códigos a 3 bits y se añade el caso para MUL.
	// Nuestra regla: MUL se reconoce cuando Funct[4:1] es 4'b0001.
	assign ALUControl = ALUOp ? (Funct[4:1] == 4'b0100 ? 3'b000 : // ADD
	                             Funct[4:1] == 4'b0010 ? 3'b001 : // SUB
	                             Funct[4:1] == 4'b0000 ? 3'b010 : // AND
	                             Funct[4:1] == 4'b1100 ? 3'b011 : // ORR
	                             Funct[4:1] == 4'b0001 ? 3'b100 : // MUL (NUEVO)
	                             3'bxxx) : 3'b000;

	assign FlagW[1] = ALUOp & Funct[0]; // S-bit (sin cambios)
	
	// CAMBIO: Se actualizan los códigos de ADD/SUB a 3 bits en la condición
	assign FlagW[0] = ALUOp & Funct[0] & (ALUControl == 3'b000 || ALUControl == 3'b001);

	assign PCS = Branch | (RegW & (Rd == 4'b1111));
	assign ImmSrc = Op;
	assign RegSrc[0] = (Op == 2'b10);
	assign RegSrc[1] = (Op == 2'b01) & ~Funct[0];
endmodule


module mainfsm (
	clk,
	reset,
	Op,
	Funct,
	IRWrite,
	AdrSrc,
	ALUSrcA,
	ALUSrcB,
	ResultSrc,
	NextPC,
	RegW,
	MemW,
	Branch,
	ALUOp
);
	input wire clk;
	input wire reset;
	input wire [1:0] Op;
	input wire [5:0] Funct;
	output wire IRWrite;
	output wire AdrSrc;
	output wire [1:0] ALUSrcA;
	output wire [1:0] ALUSrcB;
	output wire [1:0] ResultSrc;
	output wire NextPC;
	output wire RegW;
	output wire MemW;
	output wire Branch;
	output wire ALUOp;
	reg [3:0] state;
	reg [3:0] nextstate;
	reg [12:0] controls;

	//--------------------------------------------------------------------------
	// Definición de Estados  
	//--------------------------------------------------------------------------
	// Los nombres se corresponden
	// con los estados del diagrama de la FSM (S0, S1, S2, .).
	//--------------------------------------------------------------------------
	localparam [3:0] FETCH    = 0;  // S0: Búsqueda de instrucción
	localparam [3:0] DECODE   = 1;  // S1: Decodificación y lectura de registros
	localparam [3:0] MEMADR   = 2;  // S2: Cálculo de dirección para LDR/STR
	localparam [3:0] MEMRD    = 3;  // S3: Lectura de memoria para LDR
	localparam [3:0] MEMWB    = 4;  // S4: Escritura en registro desde memoria (LDR)
	localparam [3:0] MEMWR    = 5;  // S5: Escritura en memoria para STR
	localparam [3:0] EXECUTER = 6;  // S6: Ejecución de instrucción DP con registro
	localparam [3:0] EXECUTEI = 7;  // S7: Ejecución de instrucción DP con inmediato
	localparam [3:0] ALUWB    = 8;  // S8: Escritura en registro desde la ALU
	localparam [3:0] BRANCH   = 9;  // S9: Ejecución de instrucción de salto
	localparam [3:0] UNKNOWN  = 10; // Estado para instrucciones no implementadas
  
	
	//--------------------------------------------------------------------------
	always @(posedge clk or posedge reset)
		if (reset)
			state <= FETCH;
		else
			state <= nextstate;
	

	//--------------------------------------------------------------------------
	always @(*)
		casex (state)
			FETCH: nextstate = DECODE;
			DECODE:
				case (Op)
					2'b00: // Instrucción de Procesamiento de Datos
						if (Funct[5]) // Bit I=1, operando inmediato
							nextstate = EXECUTEI;
						else // Bit I=0, operando de registro
							nextstate = EXECUTER; 
					2'b01: nextstate = MEMADR; // Instrucción Load/Store
					2'b10: nextstate = BRANCH; // Instrucción Branch
					default: nextstate = UNKNOWN;
				endcase
			EXECUTER: nextstate = ALUWB; // Después de ejecutar, escribir resultado
			EXECUTEI: nextstate = ALUWB; // Después de ejecutar, escribir resultado
			MEMADR:
				if (Funct[0]) // Bit L=1, es LDR
					nextstate = MEMRD;
				else // Bit L=0, es STR
					nextstate = MEMWR;
			MEMRD: nextstate = MEMWB; // Después de leer memoria, escribir en registro
			MEMWR: nextstate = FETCH; // STR termina y vuelve a buscar
			MEMWB: nextstate = FETCH; // LDR termina y vuelve a buscar
			ALUWB: nextstate = FETCH; // DP termina y vuelve a buscar
			BRANCH: nextstate = FETCH; // Branch termina y vuelve a buscar
			default: nextstate = FETCH; // Estado seguro, volver a empezar
		endcase


	//--------------------------------------------------------------------------
	always @(*)
		case (state)
			// S0: Leer Instr de Mem[PC] a IR. Calcular PC+4 en la ALU y apuntar PC a ese valor.
			FETCH:   controls = 13'b1000100001100;
			// S1: Decodificar. Leer registros. La ALU calcula PC+8 por si es necesario para R15.
			DECODE:   controls = 13'b0000001001100;
			// S6: Ejecutar op DP (Reg). ALU hace {RegA op RegB}.
			EXECUTER: controls = 13'b0000000000001;
			// S7: Ejecutar op DP (Imm). ALU hace {RegA op Imm}.
			EXECUTEI: controls = 13'b0000000000101;
			// S8: Escribir resultado de la ALU en el registro destino.
			ALUWB:    controls = 13'b0001000000000;
			// S2: Calcular dirección de memoria. ALU hace {RegA + Imm}.
			MEMADR:   controls = 13'b0000000000100;
			// S5: Escribir en memoria. Mem[ALUOut] <- RegB.
			MEMWR:    controls = 13'b0010010000000;
			// S3: Leer de memoria. DataReg <- Mem[ALUOut].
			MEMRD:    controls = 13'b0000010000000;
			// S4: Escribir en registro. Rd <- DataReg.
			MEMWB:    controls = 13'b0001000100000;
			// S9: Ejecutar salto. PC <- (PC+8) + offset.
			BRANCH:   controls = 13'b0100000000100;
			// Estado por defecto: No hacer nada, sin riesgos.
			default:  controls = 13'bxxxxxxxxxxxxx;
		endcase

	assign {NextPC, Branch, MemW, RegW, IRWrite, AdrSrc, ResultSrc, ALUSrcA, ALUSrcB, ALUOp} = controls;
endmodule



module condlogic (
	clk,
	reset,
	Cond,
	ALUFlags,
	FlagW,
	PCS,
	NextPC,
	RegW,
	MemW,
	PCWrite,
	RegWrite,
	MemWrite
);
	input wire clk;
	input wire reset;
	input wire [3:0] Cond;
	input wire [3:0] ALUFlags;
	input wire [1:0] FlagW;
	input wire PCS;
	input wire NextPC;
	input wire RegW;
	input wire MemW;
	output wire PCWrite;
	output wire RegWrite;
	output wire MemWrite;

	wire [1:0] FlagWrite;
	wire [3:0] Flags;
	wire CondEx;

	flopr #(2) flagwritereg(clk, reset, FlagW & {2{CondEx}}, FlagWrite);

	// --- LÓGICA AÑADIDA ---
	flopenr #(4) flagsreg(clk, reset, |FlagWrite, ALUFlags, Flags);
	condcheck cc(Cond, Flags, CondEx);

	// --- LÓGICA CORREGIDA Y AÑADIDA ---
	// La escritura en el PC se permite si es un avance secuencial (NextPC) O si es un salto
	// condicional que se cumple (CondEx & PCS).
	assign PCWrite = NextPC | (CondEx & PCS); // <-- CORRECCIÓN CLAVE
	
	// Las escrituras a registros y memoria solo se habilitan si la condición es verdadera.
	assign RegWrite = CondEx & RegW;
	assign MemWrite = CondEx & MemW;
endmodule

 

module condcheck (
	Cond,
	Flags,
	CondEx
);
	input wire [3:0] Cond;
	input wire [3:0] Flags;
	output wire CondEx;

	reg N, Z, C, V;
	always@(*) {N, Z, C, V} = Flags;

	reg [15:0] CondExLut;
	always@(*)
		case ({N, Z, C, V})
			4'b0000: CondExLut = 16'b1111100011010101;
			4'b0001: CondExLut = 16'b1110100111100100;
			4'b0010: CondExLut = 16'b1111110010010111;
			4'b0011: CondExLut = 16'b1110110110100100;
			4'b0100: CondExLut = 16'b1111101011011101;
			4'b0101: CondExLut = 16'b1110101111101100;
			4'b0110: CondExLut = 16'b1111111010011111;
			4'b0111: CondExLut = 16'b1110111110101100;
			4'b1000: CondExLut = 16'b1111100011010101;
			4'b1001: CondExLut = 16'b1110100111100100;
			4'b1010: CondExLut = 16'b1111110010010111;
			4'b1011: CondExLut = 16'b1110110110100100;
			4'b1100: CondExLut = 16'b1111101011011101;
			4'b1101: CondExLut = 16'b1110101111101100;
			4'b1110: CondExLut = 16'b1111111010011111;
			4'b1111: CondExLut = 16'b1110111110101100;
			// --- CORRECCIÓN FINAL ---
			// Se asigna un valor seguro en lugar de 'x' para el caso por defecto.
			default: CondExLut = 16'b1111100011010101; // Valor para N=0,Z=0,C=0,V=0
		endcase
		
	assign CondEx = CondExLut[Cond];
endmodule

// datapath: Se actualiza el puerto de entrada ALUControl
module datapath (
	clk, reset, Adr, WriteData, ReadData, Instr, ALUFlags,
	PCWrite, RegWrite, IRWrite, AdrSrc, RegSrc, ALUSrcA, ALUSrcB,
	ResultSrc, ImmSrc, ALUControl, PCS
);
	input wire clk;
	input wire reset;
	output wire [31:0] Adr;
	output wire [31:0] WriteData;
	input wire [31:0] ReadData;
	output wire [31:0] Instr;
	output wire [3:0] ALUFlags;
	input wire PCWrite;
	input wire RegWrite;
	input wire IRWrite;
	input wire AdrSrc;
	input wire [1:0] RegSrc;
	input wire [1:0] ALUSrcA;
	input wire [1:0] ALUSrcB;
	input wire [1:0] ResultSrc;
	input wire [1:0] ImmSrc;
	// CAMBIO: Ampliado a 3 bits
	input wire [2:0] ALUControl;
	input wire PCS;

	wire [31:0] PCNext;
	wire [31:0] PC;
	wire [31:0] ExtImm;
	wire [31:0] SrcA;
	wire [31:0] SrcB;
	wire [31:0] Result;
	wire [31:0] Data;
	wire [31:0] RD1;
	wire [31:0] RD2;
	wire [31:0] A_reg;
	wire [31:0] ALUResult;
	wire [31:0] ALUOut;
	wire [3:0] RA1;
	wire [3:0] RA2;

	// PC Logic
	flopenr #(32) pcreg(clk, reset, PCWrite, PCNext, PC);
	mux2 #(32) pcmux(ALUResult, Result, PCS, PCNext);

	// Memory Interface Logic
	mux2 #(32) adrmux(PC, ALUOut, AdrSrc, Adr);
	flopenr #(32) ir(clk, reset, IRWrite, ReadData, Instr);
	flopenr #(32) datareg(clk, reset, 1'b1, ReadData, Data);

	// Register File Logic
	mux2 #(4) ra1mux(Instr[19:16], 4'b1111, RegSrc[0], RA1);
	mux2 #(4) ra2mux(Instr[3:0], Instr[15:12], RegSrc[1], RA2);
	regfile rf(clk, RegWrite, RA1, RA2, Instr[15:12], Result, PC, RD1, RD2);
	flopenr #(32) areg(clk, reset, 1'b1, RD1, A_reg);
	flopenr #(32) breg(clk, reset, 1'b1, RD2, WriteData);

	// ALU Logic
	extend ext(Instr[23:0], ImmSrc, ExtImm);
	mux2 #(32) srcAmux(A_reg, PC, ALUSrcA[0], SrcA);
	mux3 #(32) srcBmux(WriteData, ExtImm, 32'd4, ALUSrcB, SrcB);
	alu alu(SrcA, SrcB, ALUControl, ALUResult, ALUFlags);
	flopr #(32) aluoutreg(clk, reset, ALUResult, ALUOut);

	// Write-Back Logic
	mux3 #(32) resmux(ALUOut, Data, PC, ResultSrc, Result);

endmodule




// --- Módulo ALU (Unidad Aritmético-Lógica) ---
// Propósito: Realiza las operaciones aritméticas y lógicas.

module alu (
	a,
	b,
	ALUControl,
	Result,
	ALUFlags
);
	input wire [31:0] a;
	input wire [31:0] b;
	// CAMBIO: Ampliado de [1:0] a [2:0] para soportar más operaciones
	input wire [2:0] ALUControl;
	output reg [31:0] Result;
	output reg [3:0] ALUFlags; // NZCV

	wire [32:0] sum;
	assign sum = {a[31], a} + {b[31], b}; // Usado para calcular C y V en ADD/SUB

	always @(*) begin
		case (ALUControl)
			// Se actualizan los códigos a 3 bits
			3'b000: Result = a + b; // ADD
			3'b001: Result = a - b; // SUB
			3'b010: Result = a & b; // AND
			3'b011: Result = a | b; // ORR
			// CAMBIO: Se añade la nueva operación de multiplicación
			3'b100: Result = a * b; // MUL
			default: Result = 32'hxxxxxxxx;
		endcase
	end

	// Lógica para las banderas de estado
	always @(*) begin
		ALUFlags[3] = Result[31]; // N (Negativo)
		ALUFlags[2] = (Result == 32'h00000000); // Z (Cero)
		// La lógica para C (Acarreo) y V (Desbordamiento) solo aplica a ADD y SUB.
		// Para las demás operaciones, incluyendo MUL, se asignará '0', que es lo correcto.
		ALUFlags[1] = (ALUControl==3'b000 || ALUControl==3'b001) ? sum[32] : 1'b0; // C
		ALUFlags[0] = (ALUControl==3'b000 || ALUControl==3'b001) ? (sum[31] ^ a[31] ^ b[31] ^ sum[32]) : 1'b0; // V
	end
endmodule
// --- Módulo Register File (CORREGIDO) ---
module regfile (
	clk,
	we3,
	ra1,
	ra2,
	wa3,
	wd3,
	r15,
	rd1,
	rd2
);
	input wire clk;
	input wire we3;
	input wire [3:0] ra1;
	input wire [3:0] ra2;
	input wire [3:0] wa3;
	input wire [31:0] wd3;
	input wire [31:0] r15;
	output wire [31:0] rd1;
	output wire [31:0] rd2;

	reg [31:0] rf [14:0];

	// Escritura síncrona, ignorando escrituras a R15
	always @(posedge clk)
		// --- LÍNEA CORREGIDA ---
		// Se añade la condición (wa3 != 4'b1111) para ignorar escrituras al PC.
		if (we3 && (wa3 != 4'b1111))
			rf[wa3] <= wd3;

	// Lectura combinacional, con manejo especial para R15
	assign rd1 = (ra1 == 4'b1111) ? r15 : rf[ra1];
	assign rd2 = (ra2 == 4'b1111) ? r15 : rf[ra2];
endmodule


// --- Módulo Extend (Extensor de Inmediato) ---
module extend (
	Instr,
	ImmSrc,
	ExtImm
);
	input wire [23:0] Instr;
	input wire [1:0] ImmSrc;
	output reg [31:0] ExtImm;

	always @(*)
		case (ImmSrc)
			2'b00: ExtImm = {{24{1'b0}}, Instr[7:0]}; // DP, 8-bit, zero-extend
			2'b01: ExtImm = {{20{1'b0}}, Instr[11:0]}; // LDR/STR, 12-bit, zero-extend
			2'b10: ExtImm = {{6{Instr[23]}}, Instr[23:0], 2'b00}; // Branch, 24-bit, sign-extend and shift
			default: ExtImm = 32'hxxxxxxxx;
		endcase
endmodule


// --- Bloques Genéricos (Registros y Muxes) ---
module flopr #(parameter WIDTH = 8) (
	clk,
	reset,
	d,
	q
);
	input wire clk;
	input wire reset;
	input wire [WIDTH - 1:0] d;
	output reg [WIDTH - 1:0] q;

	always @(posedge clk or posedge reset)
		if (reset)
			q <= 0;
		else
			q <= d;
endmodule

module flopenr #(parameter WIDTH = 8) (
	clk,
	reset,
	en,
	d,
	q
);
	input wire clk;
	input wire reset;
	input wire en;
	input wire [WIDTH - 1:0] d;
	output reg [WIDTH - 1:0] q;

	always @(posedge clk or posedge reset)
		if (reset)
			q <= 0;
		else if (en)
			q <= d;
endmodule

module mux2 #(parameter WIDTH = 8) (
	d0,
	d1,
	s,
	y
);
	input wire [WIDTH - 1:0] d0;
	input wire [WIDTH - 1:0] d1;
	input wire s;
	output wire [WIDTH - 1:0] y;
	assign y = s ? d1 : d0;
endmodule


module mux3 (
	d0,
	d1,
	d2,
	s,
	y
);
	parameter WIDTH = 8;
	input wire [WIDTH - 1:0] d0;
	input wire [WIDTH - 1:0] d1;
	input wire [WIDTH - 1:0] d2;
	input wire [1:0] s;
	output wire [WIDTH - 1:0] y;
	assign y = (s[1] ? d2 : (s[0] ? d1 : d0));
endmodule
// NOTAS 
// Cambios realizados en el proyecto para implementar la función MUL y añadir PCS

// top.sv:
// No se realizaron cambios funcionales en este módulo. Solo se conectaron las señales `PCS` y se amplió `ALUControl` a 3 bits, que luego se pasan a los módulos correspondientes.

// arm.sv:
// Se añadió la señal `PCS` para manejar saltos y escrituras en R15, y se amplió `ALUControl` de 2 a 3 bits para permitir la instrucción MUL. 
// Conectamos la señal `PCS` al `controller` y `datapath` para que pueda seleccionar entre los valores correctos del PC y actualizarlo cuando sea necesario.
// Esto permite que las instrucciones de salto y las que escriben en R15 modifiquen correctamente el PC, lo cual no era posible antes.

// controller.sv:
// Se añadió el puerto `PCS` a la lista de puertos y se conectó para que el controlador pueda manejar la actualización del PC. 
// Además, se amplió el control de `ALUControl` a 3 bits para que sea posible ejecutar la instrucción MUL. Se actualizó el decodificador para que reconozca el valor de `Funct` correspondiente a la multiplicación y asigne `3'b100` a `ALUControl` en caso de una operación MUL.

// decode.sv:
// Se amplió el puerto `ALUControl` a 3 bits para incluir la operación MUL, reconociendo el valor `Funct[4:1] == 4'b0001` como una multiplicación. 
// Además, se añadió la lógica para manejar el valor de `PCS`, asegurando que el PC se actualice cuando sea necesario, ya sea por un salto o por la escritura en R15. Esto se hace con la asignación `PCS = Branch | (RegW & (Rd == 4'b1111))`.

// mainfsm.sv:
// Aunque no se modificaron los estados ni la secuencia de transiciones, se añadió el manejo de `ALUControl` ampliado a 3 bits en el estado `EXECUTER` y `EXECUTEI`, donde se ejecutan las operaciones de tipo Data Processing. Esto asegura que las operaciones de multiplicación sean ejecutadas correctamente con el nuevo código `ALUControl` (`3'b100` para MUL).

// condlogic.sv:
// Se modificó la lógica de `PCWrite` para incluir la condición de `PCS`, permitiendo que el PC se escriba en función de los saltos y las escrituras en R15. La expresión `PCWrite = NextPC | (CondEx & PCS)` se añadió para garantizar que el PC se actualice correctamente cuando sea necesario, dependiendo de las condiciones ARM y si es un salto o escritura en R15.

// condcheck.sv:
// No se realizaron cambios significativos en este módulo, solo se actualizó el comentario para reflejar que ahora el valor de `PCS` es parte del flujo de datos para determinar si el PC debe escribirse o no, bajo las condiciones apropiadas.

// datapath.sv:
// Se añadió un nuevo multiplexor (`pcmux`) que selecciona entre `ALUResult` (el valor secuencial del PC) o `Result` (cuando se actualiza con el valor de R15 o salto) usando la señal `PCS`. Esto asegura que el PC se pueda actualizar correctamente según las condiciones establecidas en el `controller`. También se amplió el ancho de `ALUControl` a 3 bits para permitir la ejecución de la instrucción MUL en la ALU.

// alu.sv:
// Se añadió la operación de multiplicación `3'b100` en el bloque `case` de la ALU. Esto permite que la ALU ejecute la multiplicación correctamente cuando se le pase el valor `ALUControl == 3'b100`. La lógica para las banderas de la ALU también se ajustó para no generar el acarrear (`C`) ni el desbordamiento (`V`) para la multiplicación, ya que no son relevantes para esta operación.

// regfile.sv:
// Se añadió un control para evitar la escritura en R15 (el PC). Cuando se intenta escribir en R15, se bloquea esa escritura para evitar que el PC se sobrescriba de manera incorrecta. Esto es especialmente relevante para las instrucciones que modifican el PC, como los saltos o las escrituras explícitas a R15.

// extend.sv:
// No se realizaron cambios en este módulo. El módulo sigue funcionando de la misma manera para extender los valores inmediatos según los diferentes formatos de instrucción.

// flopr.sv, flopenr.sv, mux2.sv, mux3.sv:
// No se realizaron cambios en estos módulos. Siguen funcionando como antes, como bloques de construcción básicos para el manejo de registros y multiplexores en el datapath.

// mem.sv:
// No se realizaron cambios en este módulo. La memoria sigue funcionando igual, utilizando el índice de dirección alineado para realizar lecturas y escrituras en memoria.

 
